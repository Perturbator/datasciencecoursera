table(test2$spam, pred2.prob>=.5)
set.seed(123)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split==TRUE)
test2=subset(emailsSparse, split==FALSE)
spam2CART = rpart(spam~., data=train2, method="class")
pred2CART = predict(spam2CART, newdata=test)
pred2CART = predict(spam2CART, newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
predROCR = prediction(pred2.prob, test$responsive)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
set.seed(123)
spam2RF = randomForest(spam~., data=train2, method="class")
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2
pred2RF.prob=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="class")
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="response")[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF[,2]>=.5)
pred2RF[1:4]
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
pred2RF[1:4]
pred2RF = predict(spam2RF, newdata=test2, type="class")
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
table(test2$spam, pred2RF)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF)
p=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF.prob>=.5)
predROCR = prediction(pred2RF.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("RTextTools")
library(RTextTools)
dtm2gram = creat_matrix(as.character(corpus),ngramLength=2)
dtm2gram = create_matrix(as.character(corpus),ngramLength=2)
dtm2gram
spdtm2gram = removeSparseTerms(dtm2gram,.95)
spdtm2gram
emailsSparse2gram = as.data.frame(as.matrix(spdtm2gram))
colnames(emailsSparse2gram)=make.names(colnames(emailsSparse2gram))
emailsCombined=cbind(emailsSparse,emailsSparse2gram)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
> trainCombined = subset(emailsCombined, split==TRUE)
> testCombined = subset(emailsCombined, split==FALSE)
> spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
trainCombined = subset(emailsCombined, split==TRUE)
set.seed(123)
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
prp(smapCARTcombined)
prp(spamCARTcombined)
prp(spamCARTcombined, varlen=0)
set.seed(123)
spamCARTcombined = rpart(spam~., data=trainCombined)
prp(spamCARTcombined, varlen=0)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="class")
predCARTcombined=(spamCARTcombined, newdata=testCombined)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)
table(testCombined$spam, predCARTcombined>=.5)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)[,2]
table(testCombined$spam, predCARTcombined>=.5)
predROCR = prediction(predCARTcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined)
table(testCombined$spam, predRFcombined>=.5)
table(testCombined$spam, predRFcombined)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined[,2], testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF[1:5]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")[,2]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined,type="prob")[,2]
table(testCombined$spam, predRFcombined>=.5)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL)
library("SDSFoundations", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
3+8
sqrt(25)
?sqrt
x = 5
x + 3
y = x^2
sqrt(y)
x^2
x = 6^2 + 2
x^2
x <- 6 + 2
# haosdfh
x <- 6 + 2
myvariable = c(72,, 28, -9, 12, 11)
myvariable = c(72,28, -9, 12, 11)
my variable*3
myvariable*3
sqrt(myvariable)
baseball <- read.csv("~/MITx/analytics/week2/baseball.csv")
View(baseball)
View(baseball)
View(baseball)
mean(baseball$BA)
table(baseball$Playoffs)
baseball[2,5]
bawseball[,8]
baseball[,8]
table(baseball$Playoffs)
table$Playoffs == 1
table$Playoffs == '1'
baseball$Playoffs == 1
playoffs = baseball[baseball$Playoffs == 1,]
mean(pkayoffs$BA)
mean(playoffs$BA)
setwd("~/data_science/datasciencecoursera/exploratory_data_analysis")
pollution <- read.csv("data/avgpm25.csv", colClasses=c("numeric","character",
"factor","numeric","numeric"))
head(pollution)
pollution <- read.csv("data/avgpm25.csv", colClasses=c("numeric","character",
"factor","numeric","numeric"))
head(pollution)
summary(pullution$pm25)
summary(pollution$pm25)
?boxplot
boxplot(pollution$pm25, col = "blue")
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 100)
rug(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
abline(h = 12)
hist(pollution$pm25, col = "green", breaks = 100)
rug(pollution$pm25)
abline(v=12, lwd=2)
abline(v=median(pollution$pm25), col="magenta", lwd=4)
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
abline(v=12, lwd=2)
abline(v=median(pollution$pm25), col="magenta", lwd=4)
?abline
?lwd
barplot(table(pollution$region), col = "wheat")
boxplot(pm25 ~ region, data = pollution, col = "red")
?par
par(mfrow = c(2,1), mar = c(4,4,2,1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12,lwd=2,lty = 2, col = "red")
?lty
??lty
with(pollution, plot(latitude, pm25, col = region))
abline(h=12,lwd=2,lty = 2, col = "red")
??mar
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
librar(ggplot2)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(datasets)
hist(airquality$Ozone)
hist(airquality$Ozone)
with(airquality, plot(Wind,Ozone))
airquality <- transform(airquality, Month = factor(Month))
bocplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
colors()
??pch
hist(x)
x <- rnorm(100)
hist(x)
rug(x)
x <- rnorm(100)
hist(x)
rug(x)
y <- rnorm(100)
plot(x,y)
plot(x,y, points = 18)
plot(x,y, point = 18)
plot(x,y, pch=18)
x <- rnorm(100)
hist(x)
rug(x)
y <- rnorm(100)
plot(x,y, pch=18)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par( mar = c(2,2,2,2))
plot(x,y)
pllot(mar = c(4,4,2,2))
par(mar = c(4,4,2,2))
plot(x,y)
plot(x,y, pch = 4)
plot(x,y, pch = 8)
plot(x,y, pch = 17)
example(points)
plot(x,y,pch=20)
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
plot(x,y,pch=20)
title("My scatterplot")
text(-2,2,"Label")
legen("topleft",legend = "Data", pch = 20)
legend("topleft",legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit, lwd = 3, col = "magenta")
plot(x,y, xlab="Weight", ylab= "Height", main = "Scatterplot", pch = 20)
legend("topright", legend="data", pch = 20)
z <- rpois(100)
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par("mar")
par(mar= c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mar= c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow = c(1,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par("mar")
par(mar= c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(2,2))
plot(x,y)
plot(x,z)
polt(z,x)
plot(z,x)
plot(y,x)
x <- rnorm(100)
g <- gl(2,40,labels = c("Male","Female"))
str(g)
plot(x,y)
par(mfrow=c(1,1))
plot(x,y)
plot(x,y,type="n")
points(x[g=="Male"], col = "blue")
points(x[g=="Male"], y[g=="Male"],col = "blue")
points(x[g=="Female"], y[g=="Female"],col = "pink")
points(x[g=="Female"], y[g=="Female"],col = "magenta")
points(x[g=="Female"], y[g=="Female"],col = "magenta", pch = 19)
points(x[g=="Female"], y[g=="Female"],col = "magenta", pch = 18)
points(x[g=="Female"], y[g=="Female"],col = "magenta", pch = 1)
plot(x,y,type="n")
points(x[g=="Male"], y[g=="Male"],col = "blue")
points(x[g=="Female"], y[g=="Female"],col = "magenta", pch = 1)
points(x[g=="Female"], y[g=="Female"],col = "magenta", pch = 18)
?Devices
library(datasets)
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser")
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.off()
?dev
??dev
x <- rnorm(100)
y <- x + .3 * rnorm(100)
plot(x,y)
dev.copypdf("ha.pdf")
dev.copy2pdf("ha.pdf")
dev.copy2pdf(file="ha.pdf")
power <- fread("household_power_consumption.txt")
?fread
??fread
library(data.table)
power <- fread("household_power_consumption.txt")
power <- read.table("household_power_consumption.txt")
names(power)
sdf
s
power <- read.csv("household_power_consumption.txt")
names(power)
?read.table
power <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
power <- data.table(power)
names(power)
head(power)
?strptime
library(data.table)
DF = data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT,3)
DT[c(2,3)]
DT[,c(2,3)]
DT[,list(mean(x), sum(z))]
DT[,table(y)]
file <- "household_power_consumption.txt"
library(data.table)
power <- read.table(file, header=TRUE, sep=";",
sql = "SELECT * FROM file where (Date == '1/2/2007' OR Date == '2/2/2007')")
na.strings="?")
power <- read.table(file, header=TRUE, sep=";",
sql = "SELECT * FROM file where (Date == '1/2/2007' OR Date == '2/2/2007')",
na.strings="?")
file <- c("household_power_consumption.txt")
power <- read.table(file, header=TRUE, sep=";",
sql = "SELECT * FROM file WHERE (Date == '1/2/2007' OR Date == '2/2/2007')",
na.strings="?")
power <- read.csv.sql(file, header=TRUE, sep=";",
sql = "SELECT * FROM file WHERE (Date == '1/2/2007' OR Date == '2/2/2007')",
na.strings="?")
library(sqldf)
install.packages(sqldf)
?sqldf
??sqldf
install.packages("sqldf")
library(data.table)
library(sqldf)
file <- c("household_power_consumption.txt")
power <- read.csv.sql(file, header=TRUE, sep=";",
sql = "SELECT * FROM file WHERE (Date == '1/2/2007' OR Date == '2/2/2007')",
na.strings="?")
library(data.table)
library(sqldf)
file <- c("household_power_consumption.txt")
power <- read.csv.sql(file, header=TRUE, sep=";",
sql = "SELECT * FROM file WHERE (Date == '1/2/2007' OR Date == '2/2/2007')",
na.strings="?")
?read.table
??fread
library(data.table)
file <- c("household_power_consumption.txt")
power <- fread(file, header=TRUE, sep=";", na.strings="?")
library(data.table)
file <- c("household_power_consumption.txt")
power <- fread(file, na.strings="?")
power <- fread(file, na.strings='?')
??getDataFile
power <- fread(file, header=TRUE,sep=";"na.strings='?')
power <- fread(file, header=TRUE,sep=";",na.strings='?')
names(power)
head(power)
file <- c("household_power_consumption.txt")
power <- read.csv(file, header=TRUE,sep=";",na.strings='?')
View(DT)
file <- c("household_power_consumption.txt")
power <- read.csv(file, header=TRUE,sep=";",na.strings='?')
names(power)
head(power)
str(power$Date)
power_subset <- power[Date == "2/1/2007" | Date == "22/2007",]
power_subset <- power[power$Date == "2/1/2007" | power$Date == "22/2007",]
power_subset <- power[power$Date == "2/1/2007" | power$Date == "2/2/2007",]
head(power_subset)
names(power)
hist(power_subset$Global_active_power)
hist(power_subset$Global_active_power, color = "red")
hist(power_subset$Global_active_power, col = "red")
?hist
boxplot(power_subset$Global_active_power, col = "red")
hist(power_subset$Global_active_power, col = "red")
?hist
plot(power_subset$Global_active_power, col = "red")
hist(power_subset$Global_active_power, col = "red")
hist(power_subset$Global_active_power, col = "red", breaks = 11)
hist(power_subset$Global_active_power, col = "red", breaks = 12)
hist(power_subset$Global_active_power, col = "red", breaks = 12)
hist(data$Global_active_power, breaks=12)
hist(data$Global_active_power, breaks=12)
hist(power_subset$Global_active_power, breaks=12)
power_subset <- power[power$Date == "2/1/2007" || power$Date == "2/2/2007",]
hist(power_subset$Global_active_power, col = "red", breaks = 12)
hist(power_subset$Global_active_power, col = "red", breaks = 12)
hist(power_subset$Global_active_power, breaks=12)
power_subset <- power[power$Date == "2/1/2007" | power$Date == "2/2/2007",]
hist(power_subset$Global_active_power, col = "red", breaks = 12)
hist(power_subset$Global_active_power, breaks=12)
View(power_subset)
View(power_subset)
power_subset <- power[(power$Date == "2/1/2007") | (power$Date == "2/2/2007"),]
View(power_subset)
View(power_subset)
summary(power_subset)
power_subset <- power[(power$Date == "1/2/2007") | (power$Date == "2/2/2007"),]
hist(power_subset$Global_active_power, col = "red", breaks = 12)
xlab = "Global Active Power(kilowatts)")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)")
?hist
title(main = "Global Active Power")
?hist
?title
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)")
xlab = "Global Active Power(kilowatts)", title = "sfg")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", title = "sfg")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "sfg")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "sfg")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "sfg")
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "Global Active Power")
?png
png(file = "plot1.png", height = 504, width = 504, bg = "transparent")
dev.off()
pwd()
getwd()
power_subset <- power[(power$Date == "1/2/2007") | (power$Date == "2/2/2007"),]
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "Global Active Power")
png(file = "plot1.png", height = 504, width = 504, bg = "transparent")
dev.off()
dev.off()
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "Global Active Power")
dev.copy(png,file = "plot1.png", height = 504, width = 504, bg = "transparent")
dev.off()
hist(power_subset$Global_active_power, col = "red", breaks = 12,
xlab = "Global Active Power(kilowatts)", main = "Global Active Power")
dev.copy(png,file = "plot1.png", height = 480, width = 480, bg = "transparent")
dev.off()
git st
