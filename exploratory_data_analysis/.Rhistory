performance(predROCR, "auc")@y.values
table(test$spam,spamRF>=.5)
table(test$spam,predTestRF>=.5)
wordCount = rowSums(as.matrix(dtm))
dtm
library(tm)
wordCount = rowSums(as.matrix(dtm))
hist(wordCount)
hist(log(wordCount)
)
emailsSparse$logWordCount = log(wordCount)
boxplot(emailsSparse$logWordCount)
boxplot(emailsSparse$logWordCount,emailsSparse$spam)
boxplot(,emailsSparse$spamemailsSparse$logWordCount,)
boxplot(,emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount)
boxplot(logWordCount~spam, data=emailsSparse)
train2=train
test2=test
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
pred2CART = predict(spam2CART, newdata=test2)
pred2CART[1:5]
table(test$spam,pred2CART>=.5)
table(test2$spam,pred2CART>=.5)
pred2.prob=pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
predict2CART=predict(spam2CART,newdata=test2)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob)
table(test2$spam, pred2.prob>=.5)
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob>=.5)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
train2=subset(emailsSparse, split==TRUE)
test2 = subset(emailsSparse, split==FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2.prob>=.5)
set.seed(123)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split==TRUE)
test2=subset(emailsSparse, split==FALSE)
spam2CART = rpart(spam~., data=train2, method="class")
pred2CART = predict(spam2CART, newdata=test)
pred2CART = predict(spam2CART, newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
predROCR = prediction(pred2.prob, test$responsive)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
set.seed(123)
spam2RF = randomForest(spam~., data=train2, method="class")
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2
pred2RF.prob=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="class")
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="response")[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF[,2]>=.5)
pred2RF[1:4]
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
pred2RF[1:4]
pred2RF = predict(spam2RF, newdata=test2, type="class")
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
table(test2$spam, pred2RF)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF)
p=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF.prob>=.5)
predROCR = prediction(pred2RF.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("RTextTools")
library(RTextTools)
dtm2gram = creat_matrix(as.character(corpus),ngramLength=2)
dtm2gram = create_matrix(as.character(corpus),ngramLength=2)
dtm2gram
spdtm2gram = removeSparseTerms(dtm2gram,.95)
spdtm2gram
emailsSparse2gram = as.data.frame(as.matrix(spdtm2gram))
colnames(emailsSparse2gram)=make.names(colnames(emailsSparse2gram))
emailsCombined=cbind(emailsSparse,emailsSparse2gram)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
> trainCombined = subset(emailsCombined, split==TRUE)
> testCombined = subset(emailsCombined, split==FALSE)
> spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
trainCombined = subset(emailsCombined, split==TRUE)
set.seed(123)
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
prp(smapCARTcombined)
prp(spamCARTcombined)
prp(spamCARTcombined, varlen=0)
set.seed(123)
spamCARTcombined = rpart(spam~., data=trainCombined)
prp(spamCARTcombined, varlen=0)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="class")
predCARTcombined=(spamCARTcombined, newdata=testCombined)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)
table(testCombined$spam, predCARTcombined>=.5)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)[,2]
table(testCombined$spam, predCARTcombined>=.5)
predROCR = prediction(predCARTcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined)
table(testCombined$spam, predRFcombined>=.5)
table(testCombined$spam, predRFcombined)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined[,2], testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF[1:5]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")[,2]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined,type="prob")[,2]
table(testCombined$spam, predRFcombined>=.5)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL)
library("SDSFoundations", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
3+8
sqrt(25)
?sqrt
x = 5
x + 3
y = x^2
sqrt(y)
x^2
x = 6^2 + 2
x^2
x <- 6 + 2
# haosdfh
x <- 6 + 2
myvariable = c(72,, 28, -9, 12, 11)
myvariable = c(72,28, -9, 12, 11)
my variable*3
myvariable*3
sqrt(myvariable)
baseball <- read.csv("~/MITx/analytics/week2/baseball.csv")
View(baseball)
View(baseball)
View(baseball)
mean(baseball$BA)
table(baseball$Playoffs)
baseball[2,5]
bawseball[,8]
baseball[,8]
table(baseball$Playoffs)
table$Playoffs == 1
table$Playoffs == '1'
baseball$Playoffs == 1
playoffs = baseball[baseball$Playoffs == 1,]
mean(pkayoffs$BA)
mean(playoffs$BA)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
# Connecting to hg19 and listing tables
hg19 <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables <- dbListTables(ucscDB)
library(RMySQL)
hg19 <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(ucscDB)
allTables <- dbListTables(hg19)
dbDisconnect(ucscDb)
dbDisconnect(hg19)
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = g5createFil("example.h5")
created = h5createFile("example.h5")
created
setwd("~/data_science/datasciencecoursera/getting_and_cleaning_data")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B= array(seq(0.1,2.0,by=0.1), dim=c(5,2,2))
B
attr(B, "scale") <- "liter"
B
?attr
B
str(B)
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readdf
h5write(c(12,13,14), "example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = rul("http://scholar.google.com/citations?user=HI-I6C)AAAAJ&jl=en")
con = url("http://scholar.google.com/citations?user=HI-I6C)AAAAJ&jl=en")
htmlCode = readLines(con)
htmlCode
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&jl=en")
htmlCode = readLines(con)
htmlCode
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&jl=en"
close(con)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&jl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
# Parsing with XML
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']",xmlValue)
xpathSApply(html, "//td[@id='col-citedby']",xmlValue)
close(con)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']",xmlValue)
xpathSApply(html, "//td[@id='gsc_a_b']",xmlValue)
# GET from the httr package
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
parsed
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='gsc_a_b']",xmlValue)
xpathSApply(html, "//td[@id='gsc_a_c']",xmlValue)
xpathSApply(html, "//td[@class='gsc_a_c']",xmlValue)
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
libary(api)
library(api)
install.packages("API")
install.packages("api")
?oath_app
??oauth_app
library(httr)
library("JSONLite"")
w
)
""
library("JSONLite")
library("JSONlite")
library("jsonlite")
library(jsonlite)
?readLiens()
?readLines()
?file
text <- file("q2p5.for", "r")
lines <- readLines(text)
lines
head(lines)
file <- file("q2p5.for", "r")
lines <- readLines(file)
head(lines)
length(lines)
noHead <- lines[5:1258]
head(noHead)
nohead[1][34]
noHead[1][34]
noHead[1][3]
noHead[1]
(noHead[1])[2]
(noHead[1])
?string
?String
??String
substr(noHead[1], 59,63)
sum = 0
for (i in 1:length(noHead)) {
sum += as.numeric(substr(noHead[i],59,63))
}
sum = 0
for (i in 1:length(noHead)) {
sum = sum + as.numeric(substr(noHead[i],59,63))
}
sum
noHead
?as.numeric
myVec = c()
for (i in 1:length(noHead)) {
myVec[i] = as.numeric(substr(noHead[i],59,63))
}
myVec
sum(myVec)
file <- file("q2p5.for", "r")
lines <- readLines(file)
head(lines)
length(lines)
noHead <- lines[5:1258]
head(noHead)
sum = 0
for (i in 1:length(noHead)) {
sum = sum + as.numeric(substr(noHead[i],29,33))
}
sum
file <- file("q2p5.for", "r")
lines <- readLines(file)
head(lines)
length(lines)
noHead <- lines[5:1258]
head(noHead)
sum = 0
for (i in 1:length(noHead)) {
sum = sum + as.numeric(substr(noHead[i],29,33))
}
substr(noHead[1], 29,33)
file <- file("q2p5.for", "r")
lines <- readLines(file)
head(lines)
length(lines)
noHead <- lines[5:1258]
head(noHead)
sum = 0
for (i in 1:length(noHead)) {
sum = sum + as.numeric(substr(noHead[i],29,32))
}
sum
?grep
?pairs
datasets
library(datasets)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
setwd("~/data_science/datasciencecoursera/exploratory_data_analysis")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality) ## Nothing happens!
print(p)
set.seed910)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f*x + rnorm(100, sd=.5)
f <- factor(f, lavels = c("Group 1", "Group2"))
xyplot(y ~ x | f, layout = c(2,1)) ## Plot with 2 panels
xyplot( y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
xyplot( y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...) ## First call the default panel function for 'xyplot'
panel.lmline(x, y, col = 2) ## Add a horizontal line at the median
})
library(nlme)
?nlme
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
# Modifying aesthetics
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("smooth"))
qplot(displ, hwy, data = mpg, geom = c("point","smooth"))
qplot(hwy, data = mpg, fill drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets =.~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
maacs <- readRDS("maacs_env.rds")
readRDS
?readRDS
?points
?axis
?lines
?llines
