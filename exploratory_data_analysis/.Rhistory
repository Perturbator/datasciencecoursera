x
msg
x <-
x <-
0
x
x<-1
x
x <- 5
x
print(x)
z<- 1:20
z
x <- c(.5, .6)
x
x <- 9:29
x
y <- c(1.7, "a")
y
attribute(y)
x<- ):6
x<- 0:6
class(x)
as.logical(x)
x
m<- matrix(nrow = 2, ncol = 3)
m
m<- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
dim(m) <- c(2,5)
m
x<- 1:3
y<- 10:12
cbind(x,y)
z<-rbind(x,y)
z
sd(c(5,8,12))
which.min(c(4,1,6))
load("~/MITx/analytics/week5/.RData")
emailsSparse$spam=as.factor(emailsSparse$spam)
set.seed(123)
split = sample.split(emailsSparse$spam, split = .7)
library(caTools)
split = sample.split(emailsSparse$spam, split = .7)
split = sample.split(emailsSparse$spam, SplitRatio = .7)
train = subset(emailsSparse, split == TRUE)
test = subset(emailsSparse, split ==FALSE)
logReg = glm(spam~., data=emailsSparse, family=binomial)
logReg = glm(spam~., data=train, family=binomial)
spamCART = rpart(spam~., data=train, method="class")
library(rpart)
library(rpart.plot)
spamCART = rpart(spam~., data=train, method="class")
library(randomForest)
spamRF = randomForest(spam~., data=train)
set.seed(123)
spamRF = randomForest(spam~., data=train)
predLR = predict(logReg, newdata=test)
table(test$spam, predLR)
sort(table(test$spam, predLR))
predLR[1:10]
predLR[1:5]
predLR[1:10]
sort(predLR)
predLR = predict(logReg < .00001, newdata=test)
sort(table(test$spam, predLR<.00001))
sort(table(test$spam, predLR>.99999))
sort(table(test$spam, predLR>.99999 | predLR<.00001))
table(test$spam, predLR<.00001)
length(predLR<.00001)
length(predLR>.9999)
predLR[predLR<.00001]
length(predLR[predLR<.00001])
length(predLR[predLR>.99999])
predLR<.00001
table(predLR<.00001)
set.seed(123)
logReg = glm(spam~., data=train, family=binomial)
predLR = predict(logReg, newdata=test)
table(predLR<.00001)
table(predLR<.00001 & predLR<.99999)
table(predLR>.00001 & predLR<.99999)
predLR = predict(logReg)
table(predLR<.00001)
table(predLR>.00001 & predLR<.99999)
predLR = predict(logReg, newdata=train)
table(predLR>.00001 & predLR<.99999)
table(predLR<.00001)
logReg = glm(spam~., data=train, family="binomial")
predLR = predict(logReg, newdata=train)
table(predLR<.00001)
table(predLR>.00001 & predLR<.99999)
table(predLR=<.00001)
table(predLR<=.00001)
table(predLR=>.00001 & predLR<=.99999)
table(predLR>=.00001 & predLR<=.99999)
predLR = predict(logReg, newdata=train, type="response")
table(predLR>=.00001 & predLR<=.99999)
table(predLR<=.00001)
table(predLR>.00001 & predLR<.99999)
set.seed(123)
predLR = glm(spam~., data=train, family="binomial")
logreg = glm(spam~., data=train, family="binomial")
predLR = predict(logreg, newdata=train, type="response")
table(predLR<=.00001)
table(predLR>.00001 & predLR<.99999)
set.seed(123)
logReg = glm(spam~., data=train, family="binomial")
set.seed(123)
set.seed(123)
predLR = predict(logreg, type="response")
table(predLR>.00001 & predLR<.99999)
set.seed(123)
spl = sample.split(emailsSparse$spam, SplitRatio = .7)
train = subset(emailsSparse, spl==TRUE)
test = subset(emailsSparse, spl==FALSE)
logReg = glm(spam~.,data=train, family="binomial")
predLR = predict(logReg, newdata=train, type="response")
table(predLR>.00001 & predLR < .99999)
table(predLR<.00001)
table(predLR>.99999)
spamLog = glm(spam~., data=train, family="binomial")
spamCART = rpart(spam~., data=train, method="class")
set.seed(123)
spamRF = randomForest(spam~., data=train, method="class")
summary(spamLOG)
summary(spamLog)
prp(spamCART)
table(train$spam,predLR < .5)
set.seed(123)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
table(train$spam, predTrainLog >= .5)
library(ROCR)
predROCR = prediction(predTrainLog, test$responsive)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCRLR=prediction(predTrainLog,test$spam)
predROCRLR=prediction(predTrainLog,train$spam)
performance(predROCRLR, "auc")@y.values
predCART = predict(spamCART, newdata=train)
table(train$spam,predCART)
table(train$spam,predCART>=.5)
table(train$spam, predTrainCART)
predTrainCart[1:5]
predTrainCART[1:5]
predTrainCART[,2]
table(predTrainCART,train$spam)
table(predTrainCART<.5,train$spam)
table(predTrainCART<=.5,train$spam)
table(train$spam,predTrainCART<=.5)
table(train$spam,predTrainCART>=.5)
predROCR = prediction(predTrainCART, train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(train$spam,predTrainRF>=.5)
predROCR = prediction(predTrainRF, train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predLog = predict(spamLog, newdata=test, type="response")
table(test$spam, predLog>=.5)
predROCR = prediction(predLog, train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predLog, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predCART = predict(spamCART, newdata=test, type="response")
predCART = predict(spamCART, newdata=test)
table(test$spam, predCART>=.5)
table(test$spam, predCART)
predCART = predict(spamCART, newdata=test)
predCART[1:5]
table(test$spam, predCART>=.5)
table(test$spam, predCART>=.5)
length(test$spam)
length(predCART)
spamCART = rpart(spam~., data=train, method="class")
predCART = predict(spamCART, newdata=test, type="class")
table(test$spam, predCART>=.5)
table(test$spam, predCART)
predROCR = prediction(predCART, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predCART, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF = predict(spamRF, newdata=test,type="prob")
table(test$spam, predRF>=.5)
predRF = predict(predRF, newdata=test,type="prob")
predROCR = prediction(predRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predTrainRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
spamRF = randomForest(spam~., data=train, method="class")
predTrainRF = predict(spamRF, type="prob")[,2]
predROCR = prediction(predTrainRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF = predict(predRF, newdata=test,type="prob")[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predROCR = prediction(predTrainRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
spamRF = randomForest(spam~., data=train, method="class")
predTrainRF = predict(spamRF, type="prob")[,2]
predROCR = prediction(predTrainRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predTrainRF, train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF = predict(spamRF, newdata=test)
predRF[1:5]
predRF[,2][1:5]
predRF.prob=predRF[,2]
predTestRF = predict(spamRF,newdata=test type="prob")[,2]
predTestRF = predict(spamRF,newdata=test, type="prob")[,2]
predROCR = prediction(predTestRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predTestRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test$spam,spamRF>=.5)
table(test$spam,predTestRF>=.5)
wordCount = rowSums(as.matrix(dtm))
dtm
library(tm)
wordCount = rowSums(as.matrix(dtm))
hist(wordCount)
hist(log(wordCount)
)
emailsSparse$logWordCount = log(wordCount)
boxplot(emailsSparse$logWordCount)
boxplot(emailsSparse$logWordCount,emailsSparse$spam)
boxplot(,emailsSparse$spamemailsSparse$logWordCount,)
boxplot(,emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount)
boxplot(logWordCount~spam, data=emailsSparse)
train2=train
test2=test
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
pred2CART = predict(spam2CART, newdata=test2)
pred2CART[1:5]
table(test$spam,pred2CART>=.5)
table(test2$spam,pred2CART>=.5)
pred2.prob=pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
predict2CART=predict(spam2CART,newdata=test2)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob)
table(test2$spam, pred2.prob>=.5)
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob>=.5)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
train2=subset(emailsSparse, split==TRUE)
test2 = subset(emailsSparse, split==FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2.prob>=.5)
set.seed(123)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split==TRUE)
test2=subset(emailsSparse, split==FALSE)
spam2CART = rpart(spam~., data=train2, method="class")
pred2CART = predict(spam2CART, newdata=test)
pred2CART = predict(spam2CART, newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
predROCR = prediction(pred2.prob, test$responsive)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
set.seed(123)
spam2RF = randomForest(spam~., data=train2, method="class")
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2
pred2RF.prob=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="class")
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="response")[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF[,2]>=.5)
pred2RF[1:4]
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
pred2RF[1:4]
pred2RF = predict(spam2RF, newdata=test2, type="class")
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
table(test2$spam, pred2RF)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF)
p=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF.prob>=.5)
predROCR = prediction(pred2RF.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("RTextTools")
library(RTextTools)
dtm2gram = creat_matrix(as.character(corpus),ngramLength=2)
dtm2gram = create_matrix(as.character(corpus),ngramLength=2)
dtm2gram
spdtm2gram = removeSparseTerms(dtm2gram,.95)
spdtm2gram
emailsSparse2gram = as.data.frame(as.matrix(spdtm2gram))
colnames(emailsSparse2gram)=make.names(colnames(emailsSparse2gram))
emailsCombined=cbind(emailsSparse,emailsSparse2gram)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
> trainCombined = subset(emailsCombined, split==TRUE)
> testCombined = subset(emailsCombined, split==FALSE)
> spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
trainCombined = subset(emailsCombined, split==TRUE)
set.seed(123)
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
prp(smapCARTcombined)
prp(spamCARTcombined)
prp(spamCARTcombined, varlen=0)
set.seed(123)
spamCARTcombined = rpart(spam~., data=trainCombined)
prp(spamCARTcombined, varlen=0)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="class")
predCARTcombined=(spamCARTcombined, newdata=testCombined)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)
table(testCombined$spam, predCARTcombined>=.5)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)[,2]
table(testCombined$spam, predCARTcombined>=.5)
predROCR = prediction(predCARTcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined)
table(testCombined$spam, predRFcombined>=.5)
table(testCombined$spam, predRFcombined)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined[,2], testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF[1:5]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")[,2]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined,type="prob")[,2]
table(testCombined$spam, predRFcombined>=.5)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL)
library("SDSFoundations", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
3+8
sqrt(25)
?sqrt
x = 5
x + 3
y = x^2
sqrt(y)
x^2
x = 6^2 + 2
x^2
x <- 6 + 2
# haosdfh
x <- 6 + 2
myvariable = c(72,, 28, -9, 12, 11)
myvariable = c(72,28, -9, 12, 11)
my variable*3
myvariable*3
sqrt(myvariable)
baseball <- read.csv("~/MITx/analytics/week2/baseball.csv")
View(baseball)
View(baseball)
View(baseball)
mean(baseball$BA)
table(baseball$Playoffs)
baseball[2,5]
bawseball[,8]
baseball[,8]
table(baseball$Playoffs)
table$Playoffs == 1
table$Playoffs == '1'
baseball$Playoffs == 1
playoffs = baseball[baseball$Playoffs == 1,]
mean(pkayoffs$BA)
mean(playoffs$BA)
setwd("~/data_science/datasciencecoursera/exploratory_data_analysis")
