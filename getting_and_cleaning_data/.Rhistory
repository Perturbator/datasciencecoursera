plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predTestRF, test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test$spam,spamRF>=.5)
table(test$spam,predTestRF>=.5)
wordCount = rowSums(as.matrix(dtm))
dtm
library(tm)
wordCount = rowSums(as.matrix(dtm))
hist(wordCount)
hist(log(wordCount)
)
emailsSparse$logWordCount = log(wordCount)
boxplot(emailsSparse$logWordCount)
boxplot(emailsSparse$logWordCount,emailsSparse$spam)
boxplot(,emailsSparse$spamemailsSparse$logWordCount,)
boxplot(,emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount,)
boxplot(emailsSparse$spam,emailsSparse$logWordCount)
boxplot(logWordCount~spam, data=emailsSparse)
train2=train
test2=test
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
pred2CART = predict(spam2CART, newdata=test2)
pred2CART[1:5]
table(test$spam,pred2CART>=.5)
table(test2$spam,pred2CART>=.5)
pred2.prob=pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
spam2CART=rpart(spam~., data=train2, method="class")
prp(spam2CART)
predict2CART=predict(spam2CART,newdata=test2)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob)
table(test2$spam, pred2.prob>=.5)
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = predict2CART[,2]
table(test2$spam, pred2.prob>=.5)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split=TRUE)
test2 = subset(emailsSparse, split=FALSE)
train2=subset(emailsSparse, split==TRUE)
test2 = subset(emailsSparse, split==FALSE)
spam2CART=rpart(spam~., data=train2, method="class")
pred2CART=predict(spam2CART,newdata=test2, type="class")
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2CART>=.5)
pred2.prob = pred2CART[,2]
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam, pred2CART>=.5)
pred2CART=predict(spam2CART,newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam, pred2.prob>=.5)
set.seed(123)
split = sample.split(emailsSparse$spam, SplitRatio=.7)
train2=subset(emailsSparse, split==TRUE)
test2=subset(emailsSparse, split==FALSE)
spam2CART = rpart(spam~., data=train2, method="class")
pred2CART = predict(spam2CART, newdata=test)
pred2CART = predict(spam2CART, newdata=test2)
pred2.prob = pred2CART[,2]
table(test2$spam,pred2.prob>=.5)
predROCR = prediction(pred2.prob, test$responsive)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
set.seed(123)
spam2RF = randomForest(spam~., data=train2, method="class")
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2
pred2RF.prob=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="class")
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2)[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="response")[,2]
pred2RF = predict(spam2RF, newdata=test2, type="response")
table(test2$spam, pred2RF[,2]>=.5)
pred2RF[1:4]
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
pred2RF[1:4]
pred2RF = predict(spam2RF, newdata=test2, type="class")
table(test2$spam, pred2RF)
predROCR = prediction(pred2RF, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(pred2RF[,2], test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
table(test2$spam, pred2RF)
table(test2$spam, pred2RF>=.5)
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
table(test2$spam, pred2RF)
pred2RF = predict(spam2RF, newdata=test2)
table(test2$spam, pred2RF)
p=pred2RF[,2]
pred2RF = predict(spam2RF, newdata=test2, type="prob")
table(test2$spam, pred2RF>=.5)
pred2RF.prob=pred2RF[,2]
table(test2$spam, pred2RF.prob>=.5)
predROCR = prediction(pred2RF.prob, test2$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("RTextTools")
library(RTextTools)
dtm2gram = creat_matrix(as.character(corpus),ngramLength=2)
dtm2gram = create_matrix(as.character(corpus),ngramLength=2)
dtm2gram
spdtm2gram = removeSparseTerms(dtm2gram,.95)
spdtm2gram
emailsSparse2gram = as.data.frame(as.matrix(spdtm2gram))
colnames(emailsSparse2gram)=make.names(colnames(emailsSparse2gram))
emailsCombined=cbind(emailsSparse,emailsSparse2gram)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
> trainCombined = subset(emailsCombined, split==TRUE)
> testCombined = subset(emailsCombined, split==FALSE)
> spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
trainCombined = subset(emailsCombined, split==TRUE)
set.seed(123)
set.seed(123)
split= sample.split(emailsCombined$spam, SplitRatio = .7)
trainCombined = subset(emailsCombined, split==TRUE)
testCombined = subset(emailsCombined, split==FALSE)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="prob")
prp(smapCARTcombined)
prp(spamCARTcombined)
prp(spamCARTcombined, varlen=0)
set.seed(123)
spamCARTcombined = rpart(spam~., data=trainCombined)
prp(spamCARTcombined, varlen=0)
spamCARTcombined = rpart(spam~., data=trainCombined, method="class")
set.seed(123)
spamRFcombined = randomForest(spam ~., data=trainCombined, method="class")
predCARTcombined=(spamCARTcombined, newdata=testCombined)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)
table(testCombined$spam, predCARTcombined>=.5)
predCARTcombined=predict(spamCARTcombined, newdata=testCombined)[,2]
table(testCombined$spam, predCARTcombined>=.5)
predROCR = prediction(predCARTcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined)
table(testCombined$spam, predRFcombined>=.5)
table(testCombined$spam, predRFcombined)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined[,2], testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
predRF[1:5]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")[,2]
predRFcombined = predict(spamRFcombined, newdata=testCombined, class="prob")
table(testCombined$spam, predRFcombined>=.5)
predRFcombined = predict(spamRFcombined, newdata=testCombined,type="prob")[,2]
table(testCombined$spam, predRFcombined>=.5)
predROCR = prediction(predRFcombined, testCombined$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
# Compute AUC
performance(predROCR, "auc")@y.values
install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL)
library("SDSFoundations", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
3+8
sqrt(25)
?sqrt
x = 5
x + 3
y = x^2
sqrt(y)
x^2
x = 6^2 + 2
x^2
x <- 6 + 2
# haosdfh
x <- 6 + 2
myvariable = c(72,, 28, -9, 12, 11)
myvariable = c(72,28, -9, 12, 11)
my variable*3
myvariable*3
sqrt(myvariable)
baseball <- read.csv("~/MITx/analytics/week2/baseball.csv")
View(baseball)
View(baseball)
View(baseball)
mean(baseball$BA)
table(baseball$Playoffs)
baseball[2,5]
bawseball[,8]
baseball[,8]
table(baseball$Playoffs)
table$Playoffs == 1
table$Playoffs == '1'
baseball$Playoffs == 1
playoffs = baseball[baseball$Playoffs == 1,]
mean(pkayoffs$BA)
mean(playoffs$BA)
source('~/data_science/HarvardX/inference.R')
install.packages('downloader')
source('~/data_science/HarvardX/inference.R')
set.seed(1) ##so that we get same results
dir <- system.file(package="dagdata")
list.files(dir)
list.files(file.path(dir,"extdata"))
filename <- file.path(dir,"extdata/femaleMiceWeights.csv")
dat <- read.csv(filename)
set.seed(1) ##so that we get same results
dir <- system.file(package="dagdata")
list.files(dir)
list.files(file.path(dir,"extdata"))
filename <- file.path(dir,"extdata/femaleMiceWeights.csv")
dat <- read.csv(filename)
head(dat)
control <- dat[1:12,2]
treatment <- dat[13:24,2]
print(mean(treatment))
print(mean(control))
diff <- mean(treatment)-mean(control)
print(diff)
?sample
control <- sample(population[,1],12)
mean(control)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- tempfile()
download(url,destfile=filename)
population <- read.csv(filename)
control <- sample(population[,1],12)
mean(control)
control <- sample(population[,1],12)
mean(control)
control <- sample(population[,1],12)
mean(control)
###12 control mice
control <- sample(population[,1],12)
##another 12 control mice that we act as if they were not
treatment <- sample(population[,1],12)
print(mean(treatment) - mean(control))
n <- 10000
null <- vector("numeric",n)
for(i in 1:n){
control <- sample(population[,1],12)
treatment <- sample(population[,1],12)
null[i] <- mean(treatment) - mean(control)
}
mean(null>=diff)
n <- 100
plot(0,0,xlim=c(-5,5),ylim=c(1,30),type="n")
totals <- vector("numeric",11)
for(i in 1:n){
control <- sample(population[,1],12)
treatment <- sample(population[,1],12)
nulldiff <- mean(treatment) - mean(control)
j <- pmax(pmin(round(nulldiff)+6,11),1)
totals[j]<-totals[j]+1
text(j-6,totals[j],pch=15,round(nulldiff,1))
##if(i < 15) scan() ##You can add this line to interactively see values appear
}
values <- seq(min(null),max(null),len=300)
myecdf <- ecdf(null)
plot(values,myecdf(values),type="l")
hist(null)
abline(v=diff)
1-pnorm(diff,mean(null),sd(null))
#####--------------------------------------------------------------
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- tempfile()
download(url,destfile=filename)
population <- read.csv(filename)
library(downloader)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
download(url,destfile=filename)
dat <- read.csv(filename)
head(dat)
hfPopulation <- dat[dat$Sex=="F" & dat$Diet=="hf",3]
controlPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
mu_hf <- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print(mu_hf - mu_control)
x<-controlPopulation
N<-length(x)
popvar <- mean((x-mean(x))^2)
identical(var(x),popvar)
identical(var(x)*(N-1)/N, popvar)
popvar <- function(x) mean( (x-mean(x))^2)
popsd <- function(x) sqrt(popvar(x))
sd_hf <- popsd(hfPopulation)
sd_control <- popsd(controlPopulation)
N <- 12
hf <- sample(hfPopulation,12)
control <- sample(controlPopulation,12)
Ns <- c(3,12,25,50)
B <- 10000 #number of simulations
res <-  sapply(Ns,function(n){
replicate(B,mean(sample(hfPopulation,n))-mean(sample(controlPopulation,n)))
})
library(rafalib)
mypar2(2,2)
for(i in seq(along=Ns)){
title <- paste("N=",Ns[i],"Avg=",signif(mean(res[,i]),3),"SD=",signif(popsd(res[,i]),3)) ##popsd defined above
qqnorm(res[,i],main=title)
qqline(res[,i],col=2)
}
Ns <- c(3,12,25,50)
B <- 10000 #number of simulations
##function to compute a t-stat
computetstat <- function(n){
y<-sample(hfPopulation,n)
x<-sample(controlPopulation,n)
(mean(y)-mean(x))/sqrt(var(y)/n+var(x)/n)
}
res <-  sapply(Ns,function(n){
replicate(B,computetstat(n))
})
mypar2(2,2)
for(i in seq(along=Ns)){
qqnorm(res[,i],main=Ns[i])
qqline(res[,i],col=2)
}
library(rafalib)
mypar2(2,2)
for(i in seq(along=Ns)){
title <- paste("N=",Ns[i],"Avg=",signif(mean(res[,i]),3),"SD=",signif(popsd(res[,i]),3)) ##popsd defined above
qqnorm(res[,i],main=title)
qqline(res[,i],col=2)
}
?rnomr
?rnorm
?density
?distribution
?pnorm
pnorm(-2,1,4)
1-pnorm(-2,1,4)
?var
?std
?sd
1-pnorm(-2,1,4^.5)
3exp(2)
3*exp(2)
var([0,1,2])
x=[0,1,2]
x = [2]
x = c(0,1,2)
var(x)
var(c(0,1,2,2))
1/4 +1/2*1/4
1/4 +1/2*4
1/4 +1/2*4
2.25-1.25
-1.25 -1 + 4*.5
-1.25 -1 + 4*.75
2.25-1.25^2
setwd("~/data_science/datasciencecoursera/getting_and_cleaning_data")
housing <- read.csv("data/IDhousing.csv")
names(housing)
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
strsplit(names(housing), "wgtp")[123]
strsplit(names(housing), "wgtp")
View(housing)
strsplit(names(housing), "wgtp", fixed=FALSE)
strsplit(names(housing), "wgtp")
?flatten
??flatten
unlist(strsplit(names(housing), "wgtp"))
gdp <- read.csv("data/GDP.csv")
names(gdp)
View(gdp)
gdp <- read.csv("data/GDP.csv", header= TRUE)
names(gdp)
gdp <- read.table("data/GDP.csv", header= TRUE)
gdp <- read.table("data/GDP.csv")
gdp <- read.csv("data/GDP.csv")
gdp <- read.csv("data/getdata-data-GDP.csv")
names(gdp)
View(gdp)
housing <- read.csv("data/getdata-data-ss06hid.csv")
names(housing)
unlist(strsplit(names(housing), "wgtp"))
strsplit(names(housing), "wgtp")[123]
)
strsplit(names(housing), "wgtp")[12]
strsplit(names(housing), "wgtp")[132]
names(gdp)
gdp <- read.csv("data/getdata-data-GDP.csv")
names(gdp)
gdp$Gross.domestic.product.2012
gdp$X.3
mean(gdp$X.3[5:194])
mean(as.numeric(gdp$X.3[5:194])
mean(as.numeric(gdp$X.3[5:194]))
mean(as.numeric(gdp$X.3[5:194]))
gsub
?gsub
mean(as.numeric(gsub(",","",gdp$X.3[5:194])))
grep("^United",gdp$X.2)
grep("^United",gdp$X.2[5:194])
grep("^United",as.character(gdp$X.2[5:194])
)
ed <- read.csv("data/getdata-data-EDSTATS_Country.csv")
View(ed)
?join
??join
dat <- merge(ed,gdp)
View(dat)
View(dat)
View(dat)
grep("Fiscal year end: June",dat$Special.Notes)
type(dat$Special.Notes)
?type
typeof(dat$Special.Notes)
grep("Fiscal year end: June",as.character(dat$Special.Notes)
grep("Fiscal year end: June",as.character(dat$Special.Notes))
grep("Fiscal year end: June",as.character(dat$Special.Notes))
as.character(dat$Special.Notes)
grep("^Fiscal year end: June",as.character(dat$Special.Notes))
?sapply
grep("^Fiscal year end: June",sapply(dat$Special.Notes, as.character)
grep("^Fiscal year end: June",sapply(dat$Special.Notes, as.character))
grep("^Fiscal year end: June",sapply(dat$Special.Notes, as.character))
notes <- sapply(dat$Special.Notes, as.character)
notes
typeof(notes)
grep("^Fiscal year end: June",notes)
?grep
grepl("^Fiscal year end: June",notes)
sum(grepl("^Fiscal year end: June",notes))
notes <- sapply(unique(dat$Special.Notes), as.character)
sum(grepl("^Fiscal year end: June",notes))
notes
notes <- sapply(dat$Special.Notes, as.character)
sum(grepl("^Fiscal year end: June",notes))
notes <- sapply(dat$Special.Notes, as.character)
sum(grepl("^Fiscal year end: June",notes))
notes <- sapply(dat$Special.Notes[1:234], as.character)
sum(grepl("^Fiscal year end: June",notes))
install.packages("quantmod")
library(quantmod)
amsn = getSymbols("AMZN", auto.assign=FALSE)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sum(grepl("^2012", sampleTimes))
